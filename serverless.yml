service: mybank-backend

frameworkVersion: ">=1.1.0 <2.0.0"

package:
  individually: false

provider:
  name: aws
  runtime: nodejs10.x
  region: ap-southeast-2
  stage: dev
  accountId: 828628298567
  apiKeys:
    - ${opt:stage, self:provider.stage}-apikey
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 20
      rateLimit: 10
  timeout: 30 # Timeout in seconds for this specific function. 
  environment:
    PAYEES_TABLE: payees-${opt:stage, self:provider.stage}
    ACCOUNTS_TABLE: accounts-${opt:stage, self:provider.stage}
    ACCOUNTS_DETAILS_TABLE: accounts-details-${opt:stage, self:provider.stage}
    ACCOUNTS_SNS_TOPIC: accounts-topic-${opt:stage, self:provider.stage}
    CUSTOMER_SNS_TOPIC: customer-topic-${opt:stage, self:provider.stage}
    BALANCES_TABLE: balances-${opt:stage, self:provider.stage}
    SCHEDULED_PAYMENTS_TABLE: scheduled-payments-${opt:stage, self:provider.stage}
    DIRECT_DEBITS_TABLE: direct-debits-${opt:stage, self:provider.stage}
    TRANSACTIONS_TABLE: transactions-${opt:stage, self:provider.stage}
    SPENDING_TABLE: spendings-${opt:stage, self:provider.stage}
    SAVINGS_TABLE: savings-${opt:stage, self:provider.stage}
    INCOME_TABLE: income-${opt:stage, self:provider.stage}
    MERCHANT_TABLE: merchant-${opt:stage, self:provider.stage}
    KEYWORD_CATEGORY_TABLE: keyword-category-${opt:stage, self:provider.stage}
    MCC_CODES_TABLE: mcccodes-${opt:stage, self:provider.stage}
    CATEGORIES_TABLE: categories-${opt:stage, self:provider.stage}
    BANKS_TABLE: banks-${opt:stage, self:provider.stage}
    USER_BANK_AUTH_TABLE: user-bank-auth-${opt:stage, self:provider.stage}
    AUTH0_CLIENT_ID: ${file(./dev-mybank-secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./dev-mybank.cer)}
#    MASTERCARD_P12: ./mastercard-merchant-sandbox.p12
#    MASTERCARD_CONSUMER_KEY: ${file(./dev-mybank-secrets.json):MASTERCARD_CONSUMER_KEY}
#    MARTERCARD_KEY_PASS: ${file(./dev-mybank-secrets.json):MARTERCARD_KEY_PASS}
#    MARTERCARD_KEY_ALIAS: ${file(./dev-mybank-secrets.json):MARTERCARD_KEY_ALIAS}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PAYEES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BALANCES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCHEDULED_PAYMENTS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DIRECT_DEBITS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_DETAILS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        # New permissions needed for stream
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRANSACTIONS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SPENDING_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SAVINGS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.INCOME_TABLE}"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.CUSTOMER_SNS_TOPIC}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:BatchWriteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MCC_CODES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BANKS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USER_BANK_AUTH_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MERCHANT_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.KEYWORD_CATEGORY_TABLE}"
plugins:
  - serverless-jetpack
  - serverless-plugin-split-stacks
  - serverless-dynamodb-local
  - serverless-offline-dynamodb-streams
  - serverless-offline-sns
  - serverless-offline-scheduler
  - serverless-offline #serverless-offline needs to be last in the list
custom:
  serverless-jetpack:
    mode: npm
  dynamodb:
    start:
      migrate: true
      #dbPath: ${env:PWD}
      inMemory: true
      seed: true
    seed:
      domain:
        sources:
          - table: banks-dev
            sources: [./data/banks.json]
          - table: payees-dev
            sources: [./data/payees.json]
          - table: mcccodes-dev
            sources: [./data/mcccodes.json]
          - table: categories-dev
            sources: [./data/categories.json]
          - table: keyword-category-dev
            sources: [./data/keyword-category.json]
          # - table: accounts-dev
          #   sources: [./data/accounts.json]
          # - table: accounts-details-dev
          #   sources: [./data/accounts_details.json]
          # - table: balances-dev
          #   sources: [./data/balances.json]
          # - table: transactions-dev
          #   sources: [./data/transactions.json]
  serverless-offline-dynamodb-streams:
    apiVersion: 'latest'
    endpoint: http://localhost:8000
    region: localhost
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline-sns:
    port: 4002
    debug: true
  splitStacks:
    perFunction: false
    perType: true

functions:
  auth-jwt-token:
    handler: auth/jwt_token_authorizer.auth
    cors: true
  link-accounts:
    handler: accounts/link-accounts.handler
    events:
      - http:
          path: '/mybank/v1/link-accounts'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
    environment:
      accountsTopicArn: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
  account-refresh:
    handler: accounts/account-refresh.handler
    events:
      - http:
          path: '/mybank/v1/accounts/{accountId}/refresh'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
    environment:
      accountsTopicArn: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
  account-refresh-cron:
    handler: accounts/account-refresh-cron.handler
    events:
      - schedule: rate(10 minutes)
    environment:
      SYNC_REFRESH_DURATION: "20 minutes"
      accountsTopicArn: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
  accounts:
    handler: accounts/accounts.handler
    events:
      - http: 
          path: '/mybank/v1/accounts'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/accounts/{accountId}'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  balance-sync:
    handler: accounts/balance-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  account-detail-sync:
    handler: accounts/account-detail-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  scheduled-payments-sync:
    handler: regular-payments/scheduled-payments-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  direct-debits-sync:
    handler: regular-payments/direct-debits-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  transaction-sync:
    handler: transactions/transaction-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  balances:
    handler: accounts/balances.handler
    events:
      - http: 
          path: '/mybank/v1/accounts/balances'
          method: POST
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/accounts/balances'
          method: GET
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  scheduledPayments:
    handler: regular-payments/scheduled-payments.handler
    events:
      - http: 
          path: '/mybank/v1/accounts/{accountId}/payments'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/payments'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  directDebits:
    handler: regular-payments/direct-debits.handler
    events:
      - http: 
          path: '/mybank/v1/accounts/{accountId}/direct-debits'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  transactions:
    handler: transactions/transactions.handler
    events:
      - http: 
          path: '/mybank/v1/accounts/{accountId}/transactions'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/accounts/{accountId}/transactions/{transactionId}'
          method: put
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: 'mybank/v1/transactions'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  savings-aggregator:
    handler: analytics/savings-aggregator.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TransactionsDynamoDbTable
              - StreamArn
          batchSize: 50
  spendings-aggregator:
    handler: analytics/spendings-aggregator.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TransactionsDynamoDbTable
              - StreamArn
          batchSize: 50
  income-aggregator:
    handler: analytics/income-aggregator.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TransactionsDynamoDbTable
              - StreamArn
          batchSize: 50
  merchant-aggregator:
    handler: analytics/merchant-aggregator.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TransactionsDynamoDbTable
              - StreamArn
          batchSize: 50
  spendings:
    handler: analytics/spendings.handler
    events:
      - http: 
          path: '/mybank/v1/analytics/spendings/{month}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  savings:
    handler: analytics/savings.handler
    events:
      - http: 
          path: '/mybank/v1/analytics/savings/{month}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  cashflow:
    handler: analytics/cashflow.handler
    events:
      - http: 
          path: '/mybank/v1/analytics/cashflow'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  merchant-retrieve:
    handler: analytics/merchant.handler
    events:
      - http: 
          path: '/mybank/v1/analytics/merchants/{month}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  userbank-auth:
    handler: customer/userbank-auth.handler
    events:
      - http: 
          path: '/mybank/v1/bankauths'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/bankauths/{bankcode}'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
#payees functions 
  link-payees:
    handler: payees/link-payees.handler
    events:
      - http:
          path: '/mybank/v1/link-payees'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
    environment:
      customerTopicArn: "arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.CUSTOMER_SNS_TOPIC}"
  payees-sync:
    handler: payees/payees-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:${self:provider.accountId}:${self:provider.environment.CUSTOMER_SNS_TOPIC}
  payees:
    handler: payees/payees.handler
    events:
      - http:
          path: '/mybank/v1/payees'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: '/mybank/v1/payees/{payeeId}'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  banks:
    handler: customer/banks.handler
    events:
      - http:
          path: '/mybank/v1/banks'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: '/mybank/v1/banks'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/banks/{bankcode}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  categories:
    handler: category/categories.handler
    events:
      - http:
          path: '/mybank/v1/categories'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: '/mybank/v1/categories'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  mcccodes:
    handler: category/mcccodes.handler
    events:
      - http:
          path: '/mybank/v1/mcccodes'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http:
          path: '/mybank/v1/mcccodes'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
resources:
  Resources:
    PayeesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          -
            AttributeName: payeeId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: payeeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PAYEES_TABLE}
    AccountsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
          - AttributeName: institution
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: bankIndex
            KeySchema:
              - AttributeName: customerId
                KeyType: HASH
              - AttributeName: institution
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ACCOUNTS_TABLE}
    AccountsDetailsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: accountId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ACCOUNTS_DETAILS_TABLE}
    BalancesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: accountId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BALANCES_TABLE}
    ScheduledPaymentsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.SCHEDULED_PAYMENTS_TABLE}
    DirectDebitsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DIRECT_DEBITS_TABLE}
    TransactionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: accountId
            AttributeType: S
          - AttributeName: categoryFilter
            AttributeType: S
          - AttributeName: accountFilter
            AttributeType: S
        KeySchema:
          - AttributeName: customerId
            KeyType: HASH
          - AttributeName: accountId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: categoryIndex
            KeySchema:
              - AttributeName: customerId
                KeyType: HASH
              - AttributeName: categoryFilter
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: accountIndex
            KeySchema:
              - AttributeName: customerId
                KeyType: HASH
              - AttributeName: accountFilter
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.TRANSACTIONS_TABLE}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    SpendingsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: month
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.SPENDING_TABLE}
    SavingsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: month
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.SAVINGS_TABLE}
    IncomeDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: month
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.INCOME_TABLE}
    MCCCodesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MCC_CODES_TABLE}
    CategoriesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
    BanksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: code
            AttributeType: S
        KeySchema:
          - AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BANKS_TABLE}
    UserBankAuthDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: bank
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: bank
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.USER_BANK_AUTH_TABLE}
    MerchantDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: month
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MERCHANT_TABLE}
    IndexKeyCategoryDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          - AttributeName: keyword
            AttributeType: S
        KeySchema:
          - AttributeName: keyword
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.KEYWORD_CATEGORY_TABLE}