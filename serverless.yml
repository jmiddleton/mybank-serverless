service: mybank-backend

frameworkVersion: ">=1.1.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-southeast-2
  stage: dev
  apiKeys:
    - ${opt:stage, self:provider.stage}-apikey
  usagePlan:
    quota:
      limit: 5000
      offset: 2
      period: MONTH
    throttle:
      burstLimit: 20
      rateLimit: 10
  environment:
    PAYEES_TABLE: payees-${opt:stage, self:provider.stage}
    ACCOUNTS_TABLE: accounts-${opt:stage, self:provider.stage}
    ACCOUNTS_DETAILS_TABLE: accounts-details-${opt:stage, self:provider.stage}
    ACCOUNTS_SNS_TOPIC: accounts-topic-${opt:stage, self:provider.stage}
    BALANCES_TABLE: balances-${opt:stage, self:provider.stage}
    TRANSACTIONS_TABLE: transactions-${opt:stage, self:provider.stage}
    SPENDING_TABLE: spendings-${opt:stage, self:provider.stage}
    SAVINGS_TABLE: savings-${opt:stage, self:provider.stage}
    MCC_CODES_TABLE: mcccodes-${opt:stage, self:provider.stage}
    CATEGORIES_TABLE: categories-${opt:stage, self:provider.stage}
    BANKS_TABLE: banks-${opt:stage, self:provider.stage}
    AUTH0_CLIENT_ID: ${file(./dev-mybank-secrets.json):AUTH0_CLIENT_ID}
    AUTH0_CLIENT_PUBLIC_KEY: ${file(./dev-mybank.cer)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PAYEES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BALANCES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ACCOUNTS_DETAILS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        # New permissions needed for stream
        - dynamodb:DescribeStream
        - dynamodb:GetRecords
        - dynamodb:GetShardIterator
        - dynamodb:ListStreams
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TRANSACTIONS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SPENDING_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SAVINGS_TABLE}"
    - Effect: Allow
      Action:
        - SNS:Publish
      Resource: "arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CATEGORIES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.MCC_CODES_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BANKS_TABLE}"

plugins:
  - serverless-dynamodb-local
  - serverless-offline-dynamodb-streams
  - serverless-offline-sns
  - serverless-offline #serverless-offline needs to be last in the list

custom:
  dynamodb:
    start:
      migrate: true
      inMemory: true
      seed: true
    seed:
      domain:
        sources:
          - table: payees-dev
            sources: [./data/payees.json]
          - table: accounts-dev
            sources: [./data/accounts.json]
          - table: accounts-details-dev
            sources: [./data/accounts_details.json]
          - table: balances-dev
            sources: [./data/balances.json]
          - table: transactions-dev
            sources: [./data/transactions.json]
          - table: mcccodes-dev
            sources: [./data/mcccodes.json]
          - table: categories-dev
            sources: [./data/categories.json]
          - table: banks-dev
            sources: [./data/banks.json]
  serverless-offline-dynamodb-streams:
    apiVersion: 'latest'
    endpoint: http://localhost:8000
    region: localhost
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline-sns:
    port: 4002
    debug: true

functions:
  auth-jwt-token:
    handler: auth/jwt_token_authorizer.auth
    cors: true
  register-bank:
    handler: customer/register-bank.handler
    events:
      - http:
          path: '/mybank/v1/customers'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
    environment:
      accountsTopicArn: "arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
  account-refresh:
    handler: accounts/account-refresh.handler
    events:
      - http:
          path: '/mybank/v1/accounts/{accountId}/refresh'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
    environment:
      accountsTopicArn: "arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}"
  accounts:
    handler: accounts/accounts.handler
    events:
      - http: 
          path: '/mybank/v1/accounts'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/accounts/{accountId}'
          method: ANY
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  account-sync:
    handler: accounts/account-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  balance-sync:
    handler: accounts/balance-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  account-detail-sync:
    handler: accounts/account-detail-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  balances:
    handler: accounts/balances.handler
    events:
      - http: 
          path: '/mybank/v1/accounts/balances'
          method: POST
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: '/mybank/v1/accounts/balances'
          method: GET
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  transactions:
    handler: transactions/transactions.handler
    events:
      - http: 
          path: '/mybank/v1/accounts/{accountId}/transactions'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
      - http: 
          path: 'mybank/v1/transactions'
          method: post
          cors: true
          private: true
  transaction-sync:
    handler: transactions/transaction-sync.handler
    events:
      - sns: 
          arn: arn:aws:sns:${opt:region, self:provider.region}:123456789012:${self:provider.environment.ACCOUNTS_SNS_TOPIC}
  analytics-aggregator:
    handler: analytics/analytics-aggregator.handler
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - TransactionsDynamoDbTable
              - StreamArn
          batchSize: 10
  spendings:
    handler: analytics/spendings.handler
    events:
      - http: 
          path: '/mybank/v1/analytics/spendings/{month}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  savings:
    handler: analytics/savings.handler
    events:
      - http: 
          path: '/mybank/v1/analytics/savings/{month}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token

#payees functions          
  list:
    handler: payees/list.list
    events:
      - http:
          path: '/mybank/v1/payees'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  get:
    handler: payees/get.get
    events:
      - http:
          path: '/mybank/v1/payees/{id}'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  create:
    handler: payees/create.create
    events:
      - http:
          path: '/mybank/v1/payees'
          method: post
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  update:
    handler: payees/update.update
    events:
      - http:
          path: '/mybank/v1/payees/{id}'
          method: put
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  delete:
    handler: payees/delete.delete
    events:
      - http:
          path: '/mybank/v1/payees/{id}'
          method: delete
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  banks-get:
    handler: customer/get-banks.handler
    events:
      - http:
          path: '/mybank/v1/banks'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token
  categories-get:
    handler: category/categories.handler
    events:
      - http:
          path: '/mybank/v1/categories'
          method: get
          cors: true
          private: true
          authorizer: 
            name: auth-jwt-token
            identitySource: method.request.header.Authorization
            type: token

resources:
  Resources:
    PayeesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          -
            AttributeName: payeeId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: payeeId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PAYEES_TABLE}
    AccountsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: accountId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ACCOUNTS_TABLE}
    AccountsDetailsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: accountId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.ACCOUNTS_DETAILS_TABLE}
    BalancesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: accountId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BALANCES_TABLE}
    TransactionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: accountId
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: accountId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TRANSACTIONS_TABLE}
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
    SpendingsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: month
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.SPENDING_TABLE}
    SavingsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: customerId
            AttributeType: S
          - 
            AttributeName: month
            AttributeType: S
        KeySchema:
          -
            AttributeName: customerId
            KeyType: HASH
          -
            AttributeName: month
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.SAVINGS_TABLE}
    MCCCodesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: code
            AttributeType: S
        KeySchema:
          -
            AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.MCC_CODES_TABLE}
    CategoriesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: code
            AttributeType: S
        KeySchema:
          -
            AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CATEGORIES_TABLE}
    BanksDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: code
            AttributeType: S
        KeySchema:
          -
            AttributeName: code
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.BANKS_TABLE}